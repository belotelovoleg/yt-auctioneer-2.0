generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int       @id @default(autoincrement())
  login            String    @unique
  password         String
  isActive         Boolean   @default(true)
  isAdmin          Boolean   @default(false)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  youtubeChannelId String?
  auctions         Auction[]
  bids             Bid[]
  lots             Lot[]

  @@map("users")
}

model Auction {
  id               Int           @id @default(autoincrement())
  userId           Int
  name             String
  description      String?
  date             DateTime?
  youtubeChannelId String?
  status           AuctionStatus @default(SCHEDULED)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  youtubeVideoId   String?
  discountPool     Decimal       @default(0.00) @db.Decimal(10, 2)
  discountUsed     Decimal       @default(0.00) @db.Decimal(10, 2)
  useTimer         Boolean       @default(true)
  auctionLots      AuctionLot[]
  user             User          @relation(fields: [userId], references: [id])
  bids             Bid[]

  @@map("auctions")
}

model Lot {
  id               Int          @id @default(autoincrement())
  userId           Int
  name             String
  description      String?
  startingPrice    Decimal      @db.Decimal(10, 2)
  currentPrice     Decimal?     @db.Decimal(10, 2)
  estimatedPrice   Decimal?     @db.Decimal(10, 2)
  images           String[]
  status           LotStatus    @default(DRAFT)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  sellingStartedAt DateTime?
  winnerId         Int?
  useTimer         Boolean      @default(true)
  timerDuration    Int          @default(30)
  user             User         @relation(fields: [userId], references: [id])
  winner           User?        @relation("LotWinner", fields: [winnerId], references: [id])
  auctionLots      AuctionLot[]
  bids             Bid[]

  @@map("lots")
}

model AuctionLot {
  id        Int     @id @default(autoincrement())
  auctionId Int
  lotId     Int
  order     Int     @default(0)
  auction   Auction @relation(fields: [auctionId], references: [id])
  lot       Lot     @relation(fields: [lotId], references: [id])

  @@unique([auctionId, lotId])
  @@map("auction_lots")
}

model Bid {
  id        Int      @id @default(autoincrement())
  userId    Int
  auctionId Int?
  lotId     Int?
  amount    Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  auction   Auction? @relation(fields: [auctionId], references: [id])
  lot       Lot?     @relation(fields: [lotId], references: [id])

  @@map("bids")
}

model MonitoringJob {
  id          Int      @id @default(autoincrement())
  type        String
  status      String
  data        Json?
  scheduledAt DateTime
  startedAt   DateTime?
  completedAt DateTime?
  error       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("monitoring_jobs")
}

enum AuctionStatus {
  SCHEDULED
  ACTIVE
  COMPLETED
  CANCELLED
}

enum LotStatus {
  DRAFT
  APPROVED
  SELLING
  SOLD
  UNSOLD
}
